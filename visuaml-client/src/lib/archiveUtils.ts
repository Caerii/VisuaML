/** @fileoverview Utility functions for creating archive files containing multiple export formats. */

export interface ArchiveFile {
  name: string;
  content: string;
  type?: string;
}

export interface ArchiveMetadata {
  modelName: string;
  modelPath: string;
  timestamp: string;
  totalFiles: number;
}

/**
 * Creates a structured archive file containing multiple files.
 * The archive uses a clear text format with separators for easy extraction.
 *
 * @param files Array of files to include in the archive
 * @param metadata Archive metadata including model info
 * @returns Blob containing the archive content
 */
export const createArchiveFile = (files: ArchiveFile[], metadata: ArchiveMetadata): Blob => {
  const separator = '\n' + '='.repeat(80) + '\n';

  let archiveContent = `# VisuaML Export Archive
# Model: ${metadata.modelName}
# Path: ${metadata.modelPath}
# Generated: ${metadata.timestamp}
# Files: ${metadata.totalFiles}
# 
# This archive contains all export formats for the model.
# Each file is separated by a line of 80 equals signs.
# To extract, search for "FILE:" markers and copy content between separators.
# 
# File List:
${files.map((f) => `#   - ${f.name}`).join('\n')}
${separator}`;

  for (const file of files) {
    archiveContent += `FILE: ${file.name}${separator}`;
    archiveContent += file.content;
    archiveContent += separator;
  }

  archiveContent += `# End of Archive
# Total files: ${metadata.totalFiles}
# Model: ${metadata.modelName}
# Generated by VisuaML Export System
# 
# To extract files from this archive:
# 1. Search for "FILE: filename" to find the start of each file
# 2. Copy content between the separator lines (80 equals signs)
# 3. Save each section as the corresponding filename
`;

  return new Blob([archiveContent], { type: 'text/plain' });
};

/**
 * Downloads a blob as a file with the specified filename.
 *
 * @param blob The blob to download
 * @param filename The filename for the download
 */
export const downloadBlob = (blob: Blob, filename: string): void => {
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

/**
 * Creates a filename for an archive with timestamp.
 *
 * @param modelName The name of the model
 * @param extension The file extension (default: 'archive.txt')
 * @returns Formatted filename with timestamp
 */
export const createArchiveFilename = (
  modelName: string,
  extension: string = 'archive.txt',
): string => {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  return `${modelName}_export_${timestamp}.${extension}`;
};
